service:
  name: auction-service

plugins:
  - serverless-bundle # allows us to bundle application with webpack
  - serverless-pseudo-parameters

provider: # application level (node.js)
  name: aws
  runtime: nodejs12.x
  memorySize: 256 # lamda size
  stage: ${opt:stage, 'dev'} # ${} is yaml variable. if stage is undefined, use dev
  region: us-east-2
  environment: 
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iamRoleStatements:  # all the lambdas have unique IAM, need to give access to resources
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM} # import method from serverless framework
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}

resources: # the resources, or AWS services used (ex: DynamoDB)
  Resources: # cloudformation
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

functions: # the lamda function
  createAuction: # this function will be triggered if POST event to /auction
    handler: src/handlers/createAuction.handler
    events: # function needs events to be triggered
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer}
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events: 
      - http:
          method: GET
          path: /auctions
          authorizer: ${self:custom.authorizer}
  getAuction:
    handler: src/handlers/getAuction.handler
    events: 
      - http:
          method: GET
          path: /auction/{id} # serverless framework way of params
          authorizer: ${self:custom.authorizer}
  placeBid:
    handler: src/handlers/placeBid.handler
    events: 
      - http:
          method: PATCH # use patch when you are patching a property of your resource
          path: /auction/{id}/bid # serverless framework way of params
          authorizer: ${self:custom.authorizer}
  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events: 
      - http:
          method: PATCH 
          path: /auction/{id}/picture 
          authorizer: ${self:custom.authorizer}
  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 minute) # send event with AWS eventBridge every minute

custom:
  authorizer: arn:aws:lambda:us-east-2:843542129778:function:auth-service-dev-auth
    #arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable #cloudFormation intrinsic function
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-ejaioejoaw-${self:provider.stage}
  bundle:
    linting: false # to not use linting in serverless-bundle